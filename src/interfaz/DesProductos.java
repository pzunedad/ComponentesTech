/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package interfaz;

import clases.Compra;
import clases.Pago;
import clases.Producto;
import clases.carritoCompra;
import clases.pagoTarjeta;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import javax.swing.BoxLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author pablo
 */
/**
 * La clase DesProductos representa una aplicación Swing para mostrar detalles
 * de un producto, permitiendo a los usuarios comprar el producto o agregarlo al
 * carrito de compras.
 */
public class DesProductos extends javax.swing.JFrame {

    private Producto productoSeleccionado;
    private List<Producto> productosEnCarrito = new ArrayList<>();

    /**
     * Crea una nueva instancia de DesProductos con la configuración
     * predeterminada.
     */
    public DesProductos() {
        initComponents();
    }

    /**
     * Crea una nueva instancia de DesProductos con el producto especificado.
     *
     * @param producto El producto que se mostrará en la ventana.
     */
    public DesProductos(Producto producto) {
        this();
        this.productoSeleccionado = producto;
        mostrarInformacionProducto();
    }

    /**
     * Establece el producto seleccionado después de la creación del objeto.
     *
     * @param producto El producto que se mostrará en la ventana.
     */
    public void setProductoSeleccionado(Producto producto) {
        this.productoSeleccionado = producto;
        mostrarInformacionProducto();
    }

    /**
     * Muestra la información del producto seleccionado en el JTextArea.
     */
    private void mostrarInformacionProducto() {
        // Configura el JTextArea con la información del producto
        ZonaTexto.setText(
                "Nombre: " + productoSeleccionado.getNombre() + "\n"
                + "Precio: $" + productoSeleccionado.getPrecio() + "\n"
                + "Descripción: " + productoSeleccionado.getDescripcion()
        );

        // Puedes ajustar el formato y estilo del JTextArea según tus preferencias
        ZonaTexto.setEditable(false);
        ZonaTexto.setLineWrap(true);
        ZonaTexto.setWrapStyleWord(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        titulo = new javax.swing.JLabel();
        btnComprar = new javax.swing.JButton();
        btnAgregarCarrito = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ZonaTexto = new javax.swing.JTextArea();
        Logo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(253, 253, 231));

        titulo.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        titulo.setText("Descripción Producto");

        btnComprar.setText("Comprar");
        btnComprar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnComprarMousePressed(evt);
            }
        });

        btnAgregarCarrito.setText("Agregar Carrito");
        btnAgregarCarrito.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                btnAgregarCarritoMousePressed(evt);
            }
        });

        ZonaTexto.setBackground(new java.awt.Color(253, 253, 231));
        ZonaTexto.setColumns(20);
        ZonaTexto.setRows(5);
        ZonaTexto.setBorder(null);
        ZonaTexto.setCaretColor(new java.awt.Color(255, 255, 255));
        ZonaTexto.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(ZonaTexto);

        Logo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/fotos/logoblanco40.jpg"))); // NOI18N
        Logo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                LogoMousePressed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(78, 78, 78)
                .addComponent(btnComprar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                .addComponent(btnAgregarCarrito)
                .addGap(65, 65, 65))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(Logo)
                .addGap(93, 93, 93)
                .addComponent(titulo)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(titulo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Logo, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAgregarCarrito)
                    .addComponent(btnComprar))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnComprarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnComprarMousePressed
        realizarCompra();
    }//GEN-LAST:event_btnComprarMousePressed

    private void btnAgregarCarritoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnAgregarCarritoMousePressed
        agregarAlCarrito(productoSeleccionado); // <-- Pass the selected product to the method
        mostrarVentanaCarrito();


    }//GEN-LAST:event_btnAgregarCarritoMousePressed
    //Te lleva a la pantalla final como en las paginas reales, que a la que le das al logo te lleva a la principal
    private void LogoMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_LogoMousePressed
        // Lógica para abrir la nueva pantalla (PantallaX)
        pantallaPrincipal pantallaprincipal = new pantallaPrincipal();
        pantallaprincipal.setVisible(true);

        // Opcional: cerrar la ventana actual si es necesario
        this.dispose();
    }//GEN-LAST:event_LogoMousePressed

    //Funcion compra y pago
    /**
     * Método para realizar la compra utilizando el carrito de compras y un
     * método de pago.
     */
    private void realizarCompra() {
    // Pide al usuario seleccionar un método de pago
    String[] opcionesPago = {"Tarjeta de Crédito"};
    String metodoPagoSeleccionado = (String) JOptionPane.showInputDialog(
            null,
            "Seleccione un método de pago:",
            "Método de Pago",
            JOptionPane.QUESTION_MESSAGE,
            null,
            opcionesPago,
            opcionesPago[0]);

    // Verifica si el usuario canceló la entrada
    if (metodoPagoSeleccionado == null) {
        JOptionPane.showMessageDialog(null, "Compra cancelada.");
        return;
    }

    // Procesa el pago según el método seleccionado
    Pago metodoPago;
    switch (metodoPagoSeleccionado) {
        case "Tarjeta de Crédito":
            metodoPago = obtenerDatosPagoTarjeta();
            break;

        default:
            JOptionPane.showMessageDialog(null, "Método de pago no válido.");
            return;
    }

    // Completa la compra utilizando el carrito y el método de pago seleccionado
    Compra compra = new Compra();
    compra.completarCompra(new carritoCompra(), metodoPago);

    // Muestra un mensaje indicando que la compra fue exitosa
    JOptionPane.showMessageDialog(this, "Compra realizada exitosamente: " + productoSeleccionado.getNombre());

    // Cierra la ventana después de la compra
    this.dispose();
}


    /**
     * Método para obtener los datos de la tarjeta de crédito.
     *
     * @return Una instancia de pagoTarjeta con los datos de la tarjeta.
     */
    private Pago obtenerDatosPagoTarjeta() {
        // Pide al usuario ingresar los datos de la tarjeta
        String numeroTarjeta = JOptionPane.showInputDialog("Ingrese el número de la tarjeta de crédito:");
        String fechaVencimiento = JOptionPane.showInputDialog("Ingrese la fecha de vencimiento (MM/YY):");
        String codigoSeguridadStr = JOptionPane.showInputDialog("Ingrese el código de seguridad:");

        int codigoSeguridad = 0;
        try {
            codigoSeguridad = Integer.parseInt(codigoSeguridadStr);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Error: El código de seguridad debe ser un número entero.");
        }

        return new pagoTarjeta(numeroTarjeta, fechaVencimiento, codigoSeguridad);
    }

    //Funcion para gregar al carrito
    /**
     * Agrega un producto al carrito.
     *
     * @param producto El producto a agregar al carrito.
     */
    private void agregarAlCarrito(Producto producto) {
        // Agregar el producto a la lista de productos en el carrito
        productosEnCarrito.add(producto);
        JOptionPane.showMessageDialog(null, "Producto añadido al carrito: " + producto.getNombre());
    }

    /**
     * Muestra una ventana con el contenido del carrito de compras.
     */
    private void mostrarVentanaCarrito() {
        JFrame ventanaCarrito = new JFrame("Carrito de Compra");
        ventanaCarrito.setSize(400, 300);
        ventanaCarrito.setLayout(new BorderLayout());

        JPanel panelProductos = new JPanel();
        panelProductos.setLayout(new BoxLayout(panelProductos, BoxLayout.Y_AXIS));

        // Mostrar los productos del carrito directamente en la ventana emergente
        for (Producto producto : productosEnCarrito) {
            // Etiqueta para mostrar el nombre y la cantidad del producto
            JLabel lblProducto = new JLabel(producto.getNombre() + " - Precio: " + producto.getPrecio());

            // Panel para organizar la etiqueta del producto y los botones de añadir y eliminar
            JPanel panelProducto = new JPanel(new BorderLayout());
            panelProducto.add(lblProducto, BorderLayout.CENTER);

            // Botón para decrementar la cantidad del producto en el carrito
            JButton btnEliminar = new JButton("-");
            btnEliminar.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    quitarDelCarrito(producto);
                    ventanaCarrito.dispose();
                    mostrarVentanaCarrito();
                }
            });
            panelProducto.add(btnEliminar, BorderLayout.EAST);

            panelProductos.add(panelProducto);
        }

        // Botón de compra en la parte inferior
        JButton btnRealizarCompra = new JButton("Realizar Compra");
        btnRealizarCompra.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Lógica para realizar la compra con los productos en el carrito
                // Verifica si hay productos en el carrito
                if (productosEnCarrito.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "El carrito de compras está vacío. Agregue productos antes de comprar.");
                    return;
                } else {
                    realizarCompra();
                    ventanaCarrito.dispose();
                }
            }
        });
        JPanel panelBotones = new JPanel(new FlowLayout(FlowLayout.RIGHT));
        panelBotones.add(btnRealizarCompra);

        ventanaCarrito.add(panelBotones, BorderLayout.SOUTH);
        ventanaCarrito.add(panelProductos, BorderLayout.CENTER);
        ventanaCarrito.setVisible(true);
    }

    /**
     * Quita un producto del carrito.
     *
     * @param producto El producto a quitar del carrito.
     */
    private void quitarDelCarrito(Producto producto) {
        productosEnCarrito.remove(producto);
        JOptionPane.showMessageDialog(null, "Producto eliminado del carrito: " + producto.getNombre());
    }

    /**
     * Método principal para lanzar la aplicación DesProductos.
     *
     * @param args Los argumentos de la línea de comandos.
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DesProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DesProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DesProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DesProductos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DesProductos().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Logo;
    private javax.swing.JTextArea ZonaTexto;
    private javax.swing.JButton btnAgregarCarrito;
    private javax.swing.JButton btnComprar;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel titulo;
    // End of variables declaration//GEN-END:variables
}
